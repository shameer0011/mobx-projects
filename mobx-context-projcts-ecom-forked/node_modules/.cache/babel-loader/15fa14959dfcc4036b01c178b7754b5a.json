{"ast":null,"code":"import _slicedToArray from \"C:/Users/DELL/Downloads/mobx-context-projcts-ecom-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Downloads\\\\mobx-context-projcts-ecom-forked\\\\src\\\\todo-context\\\\index-context.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useContext, useReducer } from 'react';\nimport todoReducer from './todo-reducer';\nimport TodoContext from './todo-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar MainContext = function MainContext(props) {\n  _s();\n\n  var initialState = {\n    todos: [] //this name must be same as the  reducer function return name 'todos'\n\n  };\n\n  var _useReducer = useReducer(todoReducer, initialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      states = _useReducer2[0],\n      dispatch = _useReducer2[1]; //states value is the initialState\n  //add todo \n\n\n  var addTodo = function addTodo(todo) {\n    dispatch({\n      type: 'ADD_TODO',\n      payload: todo\n    });\n  }; //toggle todo\n\n\n  var toggleTodo = function toggleTodo(id) {\n    // console.log(id,\"toggle id context\")\n    dispatch({\n      type: 'TOGGLE_TODO',\n      payload: id\n    });\n  }; //remove todo\n\n\n  var removeTodo = function removeTodo(id) {\n    dispatch({\n      type: 'REMOVE_TODO',\n      payload: id\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"MainContext\", /*#__PURE__*/_jsxDEV(TodoContext.Provider, {\n      value: {\n        todos: states.todos,\n        addTodo: addTodo,\n        toggleTodo: toggleTodo,\n        removeTodo: removeTodo\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 3\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(MainContext, \"6/zf7C/Q1U50EQU1DttApNzkE34=\");\n\n_c = MainContext;\nexport { MainContext }; //MainContext is the provider and useGlobalState is the consumer\n//MainContext which is implemented in App.js /Router/index.js/ or any other component that needs to use the global state\n//useGlobalState which is used to get global fn and state from MainContext\n\nvar _c;\n\n$RefreshReg$(_c, \"MainContext\");","map":{"version":3,"names":["React","useContext","useReducer","todoReducer","TodoContext","MainContext","props","initialState","todos","states","dispatch","addTodo","todo","type","payload","toggleTodo","id","removeTodo","children"],"sources":["C:/Users/DELL/Downloads/mobx-context-projcts-ecom-forked/src/todo-context/index-context.js"],"sourcesContent":["import React, { useContext, useReducer } from 'react'\r\nimport  todoReducer  from './todo-reducer';\r\nimport TodoContext from './todo-context';\r\nconst MainContext = (props) => {\r\n    const initialState = {\r\n        todos: [], //this name must be same as the  reducer function return name 'todos'\r\n    }\r\n    const [states, dispatch]=useReducer(todoReducer, initialState); //states value is the initialState\r\n    //add todo \r\n    const addTodo = (todo) => {\r\n        dispatch({\r\n            type: 'ADD_TODO',\r\n            payload:todo\r\n        })\r\n    }\r\n    //toggle todo\r\n    const toggleTodo = (id) => {\r\n        // console.log(id,\"toggle id context\")\r\n        dispatch({\r\n            type: 'TOGGLE_TODO',\r\n            payload:id\r\n        })\r\n    }\r\n    //remove todo\r\n    const removeTodo = (id) => {\r\n        dispatch({\r\n            type: 'REMOVE_TODO',\r\n            payload:id\r\n        })\r\n    }\r\n\r\n  return (\r\n    <> \r\n    MainContext\r\n  <TodoContext.Provider value={{\r\n        todos: states.todos,\r\n        addTodo,\r\n        toggleTodo,\r\n        removeTodo\r\n    }}>\r\n        {props.children}\r\n    </TodoContext.Provider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport { MainContext };\r\n\r\n//MainContext is the provider and useGlobalState is the consumer\r\n//MainContext which is implemented in App.js /Router/index.js/ or any other component that needs to use the global state\r\n//useGlobalState which is used to get global fn and state from MainContext"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,QAA8C,OAA9C;AACA,OAAQC,WAAR,MAA0B,gBAA1B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;EAAA;;EAC3B,IAAMC,YAAY,GAAG;IACjBC,KAAK,EAAE,EADU,CACN;;EADM,CAArB;;EAGA,kBAAyBN,UAAU,CAACC,WAAD,EAAcI,YAAd,CAAnC;EAAA;EAAA,IAAOE,MAAP;EAAA,IAAeC,QAAf,mBAJ2B,CAIqC;EAChE;;;EACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAU;IACtBF,QAAQ,CAAC;MACLG,IAAI,EAAE,UADD;MAELC,OAAO,EAACF;IAFH,CAAD,CAAR;EAIH,CALD,CAN2B,CAY3B;;;EACA,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACC,EAAD,EAAQ;IACvB;IACAN,QAAQ,CAAC;MACLG,IAAI,EAAE,aADD;MAELC,OAAO,EAACE;IAFH,CAAD,CAAR;EAIH,CAND,CAb2B,CAoB3B;;;EACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACD,EAAD,EAAQ;IACvBN,QAAQ,CAAC;MACLG,IAAI,EAAE,aADD;MAELC,OAAO,EAACE;IAFH,CAAD,CAAR;EAIH,CALD;;EAOF,oBACE;IAAA,uCAEF,QAAC,WAAD,CAAa,QAAb;MAAsB,KAAK,EAAE;QACvBR,KAAK,EAAEC,MAAM,CAACD,KADS;QAEvBG,OAAO,EAAPA,OAFuB;QAGvBI,UAAU,EAAVA,UAHuB;QAIvBE,UAAU,EAAVA;MAJuB,CAA7B;MAAA,UAMOX,KAAK,CAACY;IANb;MAAA;MAAA;MAAA;IAAA,SAFE;EAAA,gBADF;AAaD,CAzCD;;GAAMb,W;;KAAAA,W;AA2CN,SAASA,WAAT,G,CAEA;AACA;AACA"},"metadata":{},"sourceType":"module"}